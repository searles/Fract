// Labels of of extern parameters
val maxIterationLabel = "Maximum Iteration Count";
val functionLabel = "Function (z[n])";
val maxExponentLabel = "Maximum Exponent";
val isJuliaSetLabel = "Julia Set";
val juliaSetParameterLabel = "Julia Set Parameter";
val z0Label = "Start Value (z[0])";
val isBoundLabel = "All Points are bound";
val bailoutRadiusLabel = "Bailout Radius";
val bailoutValueLabel = "Bailout Value";
val bailoutColorValueLabel = "Bailout Color Value";
val bailoutHeightLabel = "Bailout Height";
val bailoutPaletteLabel = "Bailout Palette";
val epsilonRadiusLabel = "Epsilon Radius";
val lakeValueLabel = "Lake Value";
val lakeColorValueLabel = "Lake Color Value";
val lakeHeightLabel = "Lake Height";
val lakePaletteLabel = "Lake Palette";
val trapFunctionLabel = "Orbit Trap Function";
val isDrawBailoutTrapLabel = "Draw Orbit Trap in Bailout";
val bailoutTrapValueLabel = "Bailout Orbit Trap Value";
val bailoutTrapColorValueLabel = "Bailout Orbit Trap Color Value";
val bailoutTrapHeightLabel = "Bailout Orbit Trap Height";
val bailoutTrapPaletteLabel = "Bailout Orbit Trap Palette";
val isDrawLakeTrapLabel = "Draw Orbit Trap in Lake";
val lakeTrapValueLabel = "Lake Orbit Trap Value";
val lakeTrapColorValueLabel = "Lake Orbit Trap Color Value";
val lakeTrapHeightLabel = "Lake Orbit Trap Height";
val lakeTrapPaletteLabel = "Lake Orbit Trap Palette";
val startIndexLabel = "Start Index of Orbit Trap";

setScale(2, 0, 0, 2, 0, 0); // Default Scale

class Calculator {
    extern maxIteration: maxIterationLabel = "250";

    var n: Int = 0; // count iterations
    var c: Cplx;    // parameter
    var z: Cplx;
    var lastZ: Cplx = 0:0; // z[n-1]
    var nextZ: Cplx; // z[n+1]
    var radZ: Real; // |z[n]|
    var dz: Cplx;   // z[n+1] - z[n]
    var radDz: Real; //  |dz|

    var firstTrapIndex: Int = -1;
    var lastTrapIndex: Int = -1;

    var firstTrapDistance: Real;
    var lastTrapDistance: Real;

    var firstTrapPoint: Cplx;
    var lastTrapPoint: Cplx;

    fun init() {
        extern isJuliaSet: isJuliaSetLabel = "false";
        c = if(isJuliaSet) {
            extern juliaSetParameter: juliaSetParameterLabel = "-0.75: 0.25";
            juliaSetParameter
        } else {
            point;
        }

        z = if(isJuliaSet) {
            point
        } else {
            extern z0: z0Label = "0";
            z0;
        }
    }

    extern isBound: isBoundLabel = "false";

    fun updateTrap() {
        extern trapFunction: trapFunctionLabel = "0.66 - 6 * circle(0 : 0, 1.42, nextZ)";

        var trapDistance: Real = trapFunction;

        if(trapDistance > 0) {
            if(firstTrapIndex < 0) {
                firstTrapIndex = n;
                firstTrapDistance = trapDistance;
                firstTrapPoint = nextZ;
            }

            lastTrapIndex = n;
            lastTrapDistance = trapDistance;
            lastTrapPoint = nextZ;
        }
    }

    /*
    * Performs one full calculation step
    * z, lastZ and n are modified.
    * true is returned if none of the break conditions succeeds.
    */
    fun step() {
        extern function: functionLabel = "z^2 + c";
        nextZ = function;

        radZ = rad nextZ;
        dz = nextZ - z;
        radDz = rad dz;

        extern startIndex: startIndexLabel = "0";

        if(n >= startIndex) {
            updateTrap();
        }
    }

    fun advance() {
        lastZ = z;
        z = nextZ;
    }

    fun setLakeValues() {
        extern isDrawLakeTrap: isDrawLakeTrapLabel = "true";

        if(isDrawLakeTrap and firstTrapIndex >= 0) {
            val paletteIndex = addPalette(lakeTrapPaletteLabel, 3, 4,
                [0, 0, #ff000000], [0, 1, #ff000000], [0, 2, #ff000000], [0, 3, #ff000000],
                [1, 0, #ffff0000], [1, 1, #ffffff00], [1, 2, #ff00aa00], [1, 3, #ff0000ff],
                [2, 0, #ffffffff], [2, 1, #ffffffff], [2, 2, #ffffffff], [2, 3, #ffffffff]
            );

            extern lakeTrapValue: lakeTrapValueLabel = "firstTrapDistance : log(firstTrapIndex + e)";
            extern lakeTrapColorValue: lakeTrapColorValueLabel = "value";
            extern lakeTrapHeight: lakeTrapHeightLabel = "re value";

            var value = lakeTrapValue;
            setResult(paletteIndex, lakeTrapColorValue, lakeTrapHeight);
        } else {
            val lakePaletteIndex =
                addPalette(lakePaletteLabel, 2, 2, [0, 0, #ff000000], [0, 1, #ffffffff], [1, 1, #ff000000], [1, 0, #ffffffff]);

            extern lakeValue: lakeValueLabel = "log1p rad z : argnorm z";
            extern lakeColorValue: lakeColorValueLabel = "value";
            extern lakeHeight: lakeHeightLabel = "re value";

            var value = lakeValue;
            setResult(lakePaletteIndex, lakeColorValue, lakeHeight);
        }
    }

    fun isMaxIteration() {
        if(not next(maxIteration, n)) {
            setLakeValues();
            true
        } else {
            false
        }
    }

    fun isEpsilon() {
        extern epsilonRadius: epsilonRadiusLabel = "1e-9";

        if(radDz < epsilonRadius) {
            setLakeValues();
            true
        } else {
            false
        }
    }

    fun setBailoutValues() {
        extern isDrawBailoutTrap: isDrawBailoutTrapLabel = "true";

        if(isDrawBailoutTrap and firstTrapIndex >= 0) {
            val paletteIndex = addPalette(bailoutTrapPaletteLabel, 3, 4,
                [0, 0, #ff000000], [0, 1, #ff000000], [0, 2, #ff000000], [0, 3, #ff000000],
                [1, 0, #ffff0000], [1, 1, #ffffff00], [1, 2, #ff00aa00], [1, 3, #ff0000ff],
                [2, 0, #ffffffff], [2, 1, #ffffffff], [2, 2, #ffffffff], [2, 3, #ffffffff]
            );

            extern bailoutTrapValue: bailoutTrapValueLabel = "lastTrapDistance : log(lastTrapIndex + e)";
            extern bailoutTrapColorValue: bailoutTrapColorValueLabel = "value";
            extern bailoutTrapHeight: bailoutTrapHeightLabel = "re value";

            var value = bailoutTrapValue;
            setResult(paletteIndex, bailoutTrapColorValue, bailoutTrapHeight);
        } else {
            val paletteIndex = addPalette(bailoutPaletteLabel, 2, 2,
                                [0, 0, #ff000000], [0, 1, #ffffffff], [1, 1, #ff000000], [1, 0, #ffffffff]);

            extern maxExponent: maxExponentLabel = "2";

            // smoothness value for fractal polynoms
            var continuousAddend =
                1 - log(log radZ / log bailoutRadius) / log maxExponent;

            extern bailoutValue: bailoutValueLabel = "log(n + continuousAddend + 20.08)";
            extern bailoutColorValue: bailoutColorValueLabel = "value";
            extern bailoutHeight: bailoutHeightLabel = "re value";

            var value = bailoutValue;
            setResult(paletteIndex, bailoutColorValue, bailoutHeight);
        }
    }

    fun isBailout() {
        extern bailoutRadius: bailoutRadiusLabel = "64";

        if(radZ >= bailoutRadius) {
            setBailoutValues();
            true
        } else {
            false
        }
    }

    fun isBreak() {
        (if(not isBound) isBailout() else false) or
        isEpsilon() or
        isMaxIteration()
    }
}

val calculator = Calculator();

calculator.init();

while ({
    calculator.step();
    not calculator.isBreak()
}) {
    calculator.advance();
}
